package interactions.ussd;

import interactions.wait.WaitFor;
import net.serenitybdd.screenplay.Actor;
import net.serenitybdd.screenplay.Interaction;
import net.serenitybdd.screenplay.actions.Click;
import net.serenitybdd.screenplay.actions.Enter;
import net.thucydides.core.annotations.Step;
import utils.CapturaDePantallaMovil;
import utils.EvidenciaUtils;

import static net.serenitybdd.screenplay.Tasks.instrumented;
import static userinterfaces.USSDPage.*;

/**
 * Interacci√≥n para ingresar una opci√≥n en el men√∫ USSD y confirmar la selecci√≥n
 *
 * Principios SOLID aplicados:
 * - SRP: Responsabilidad √∫nica de manejar la entrada de opciones USSD
 * - OCP: Extensible para diferentes tipos de validaciones
 * - DIP: Depende de abstracciones del framework Screenplay
 *
 * @author Senior Test Automation Engineer
 */
public class IngresarOpcionUSSD implements Interaction {

    private final String opcion;
    private final String descripcionPaso;

    public IngresarOpcionUSSD(String opcion, String descripcionPaso) {
        this.opcion = opcion;
        this.descripcionPaso = descripcionPaso;
    }

    public static IngresarOpcionUSSD laOpcion(String opcion, String descripcionPaso) {
        return instrumented(IngresarOpcionUSSD.class, opcion, descripcionPaso);
    }

    @Override
    @Step("Ingresar la opci√≥n '{0}' en el men√∫ USSD para: {1}")
    public <T extends Actor> void performAs(T actor) {
        try {
            System.out.println("üì± Ingresando opci√≥n USSD: " + opcion + " - " + descripcionPaso);

            // Registrar el paso para evidencia
            EvidenciaUtils.registrarCaptura("Antes de ingresar opci√≥n " + opcion + " - " + descripcionPaso);

            // Esperar a que el campo de entrada est√© disponible
            actor.attemptsTo(WaitFor.aTime(2000));

            // Limpiar campo si hay contenido previo
            limpiarCampoSiEsNecesario(actor);

            // Ingresar la opci√≥n seleccionada
            actor.attemptsTo(
                    Enter.theValue(opcion).into(CJA_INGRESAR_OPCION)
            );

            // Captura despu√©s de ingresar la opci√≥n
            CapturaDePantallaMovil.tomarCapturaPantalla("opcion_" + opcion + "_ingresada");

            // Confirmar la selecci√≥n con el bot√≥n Enviar
            actor.attemptsTo(
                    Click.on(BTN_ENVIAR)
            );

            // Esperar procesamiento de la solicitud
            actor.attemptsTo(WaitFor.aTime(3000));

            // Captura final del resultado
            EvidenciaUtils.registrarCaptura("Resultado despu√©s de enviar opci√≥n " + opcion + " - " + descripcionPaso);

            System.out.println("‚úÖ Opci√≥n USSD " + opcion + " procesada exitosamente");

        } catch (Exception e) {
            System.err.println("‚ùå Error al procesar opci√≥n USSD " + opcion + ": " + e.getMessage());
            CapturaDePantallaMovil.tomarCapturaPantalla("error_opcion_" + opcion);
            throw new RuntimeException("Fallo al ingresar opci√≥n USSD: " + e.getMessage(), e);
        }
    }

    /**
     * Limpia el campo de entrada si contiene texto previo
     */
    private <T extends Actor> void limpiarCampoSiEsNecesario(T actor) {
        try {
            // Seleccionar todo el texto del campo y limpiarlo
            actor.attemptsTo(
                    Click.on(CJA_INGRESAR_OPCION)
            );

            // Pausa para asegurar que el campo est√© seleccionado
            actor.attemptsTo(WaitFor.aTime(500));

        } catch (Exception e) {
            System.out.println("‚ÑπÔ∏è Campo de entrada no necesita limpieza o no est√° disponible");
        }
    }

    // Factory methods para casos espec√≠ficos del flujo USSD

    /**
     * M√©todo espec√≠fico para seleccionar compra de paquetes (opci√≥n 1)
     */
    public static IngresarOpcionUSSD compraDePaquetes() {
        return instrumented(IngresarOpcionUSSD.class, "1", "Compra de paquetes");
    }

    /**
     * M√©todo espec√≠fico para seleccionar el paquete m√°s vendido (opci√≥n 1)
     */
    public static IngresarOpcionUSSD paqueteMasVendido() {
        return instrumented(IngresarOpcionUSSD.class, "1", "El m√°s vendido");
    }

    /**
     * M√©todo espec√≠fico para seleccionar recargas (opci√≥n 2)
     */
    public static IngresarOpcionUSSD recargas() {
        return instrumented(IngresarOpcionUSSD.class, "2", "Recargas");
    }

    /**
     * M√©todo espec√≠fico para consulta de saldo (opci√≥n 3)
     */
    public static IngresarOpcionUSSD consultaSaldo() {
        return instrumented(IngresarOpcionUSSD.class, "3", "Consulta de saldo y consumos");
    }

    /**
     * M√©todo gen√©rico para cualquier opci√≥n personalizada
     */
    public static IngresarOpcionUSSD opcionPersonalizada(String numero, String descripcion) {
        return instrumented(IngresarOpcionUSSD.class, numero, descripcion);
    }

    // Getters para testing y debugging
    public String getOpcion() {
        return opcion;
    }

    public String getDescripcionPaso() {
        return descripcionPaso;
    }
}